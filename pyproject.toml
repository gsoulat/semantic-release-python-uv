# =============================================================================
# MÉTADONNÉES DU PROJET
# =============================================================================
# Cette section contient les informations de base sur votre package Python
[project]
# Nom du package tel qu'il apparaîtra sur PyPI et pour 'pip install'
name = "semantic-release"

# Version actuelle du package - ATTENTION: Cette valeur est automatiquement
# mise à jour par semantic-release lors d'un release. Ne la modifiez pas manuellement.
version = "1.2.0"


# Description courte qui apparaît dans les métadonnées du package
description = "Semantic release for Python packages"

# Fichier README qui sera affiché sur PyPI
# IMPORTANT: Ce fichier doit exister et le nom est case-sensitive (README.md, pas Readme.md)
readme = "README.md"

# Version minimale de Python requise pour utiliser ce package
requires-python = ">=3.13"

# Liste des dépendances nécessaires au fonctionnement du package
# Format: "nom-package>=version-minimale"
dependencies = [
    "pandas>=2.3.3",
]

# =============================================================================
# URLs DU PROJET
# =============================================================================
# URLs qui apparaissent dans les métadonnées du package (sur PyPI, etc.)
[project.urls]
Repository = "https://github.com/gsoulat/semantic-release-python-uv"
# Vous pouvez ajouter d'autres URLs comme:
# Documentation = "https://..."
# "Bug Tracker" = "https://..."
# Changelog = "https://..."

# =============================================================================
# CONFIGURATION DU SYSTÈME DE BUILD
# =============================================================================
# Définit quel outil est utilisé pour construire le package
[build-system]
# Backend de build utilisé - Hatchling est moderne et rapide
requires = ["hatchling"]
build-backend = "hatchling.build"

# =============================================================================
# CONFIGURATION HATCHLING - LOCALISATION DES FICHIERS
# =============================================================================
# Indique à hatchling où trouver le code source du package
# NÉCESSAIRE car notre package est dans src/ et non à la racine
# Sans cette configuration, hatchling ne sait pas quels fichiers inclure dans le wheel
[tool.hatch.build.targets.wheel]
packages = ["src"]

# =============================================================================
# SEMANTIC RELEASE - CONFIGURATION PRINCIPALE
# =============================================================================
# Semantic Release automatise la gestion des versions basée sur les commits
[tool.semantic_release]

version_toml = ["pyproject.toml:project.version"]
build_command = "uv build"
major_on_zero = false
tag_format = "v{version}"

# =============================================================================
# SEMANTIC RELEASE - CONFIGURATION DES BRANCHES
# =============================================================================
# Définit comment chaque branche gère les releases

# BRANCHE MAIN - Versions stables (production)
[tool.semantic_release.branches.main]
match = "main"                    # Nom de la branche à matcher
prerelease = false                # false = versions stables (1.0.0, 1.1.0, 2.0.0)
# Exemples de versions créées sur main: 1.0.0, 1.1.0, 1.2.0, 2.0.0

# BRANCHE DEVELOP - Versions de pré-release (RC = Release Candidate)
[tool.semantic_release.branches.develop]
match = "develop"                 # Nom de la branche à matcher
prerelease = true                 # true = versions avec suffixe
# Exemples de versions créées sur develop: 1.0.0-rc.1, 1.0.0-rc.2, 1.1.0-rc.1

# =============================================================================
# SEMANTIC RELEASE - ANALYSE DES COMMITS
# =============================================================================
# Configure comment semantic-release analyse vos commits pour déterminer
# le type de release (major, minor, patch)
[tool.semantic_release.commit_parser_options]
allowed_tags = ["feat", "fix", "perf", "refactor"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "refactor"]

# NOTES sur le versioning:
# - MAJOR (0.1.0 → 1.0.0): Commit avec "BREAKING CHANGE:" dans le corps
# - MINOR (0.1.0 → 0.2.0): Commits avec tags listés dans minor_tags
# - PATCH (0.1.0 → 0.1.1): Commits avec tags listés dans patch_tags
# - Autres commits (docs, style, etc.): Ne déclenchent PAS de nouvelle version

# =============================================================================
# SEMANTIC RELEASE - GÉNÉRATION DU CHANGELOG
# =============================================================================
# Configure la génération automatique du fichier CHANGELOG.md
[tool.semantic_release.changelog]

# Patterns de commits à exclure du changelog (regex)
# Exemple: ["^chore:", "^ci:"] exclurait tous les commits chore et ci
exclude_commit_patterns = []

# Configuration du template de changelog par défaut
# NOUVELLE SYNTAXE (v9+): changelog_file a été déplacé ici
[tool.semantic_release.changelog.default_templates]
# Nom du fichier où écrire le changelog
# Le changelog est généré automatiquement à partir des commits
changelog_file = "CHANGELOG.md"
